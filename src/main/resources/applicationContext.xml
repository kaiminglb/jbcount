<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- 打开Spring的Annotation支持 ，context:component-scan 已包含 context:annotation-config 
		的功能 -->
	<!--<context:annotation-config /> -->
	<!-- 组件扫描，配置spring自动扫描的包 -->
	<!-- 设定Spring 去哪些包中找Annotation,包括了springmvc的controller， 应该把controller排除掉，mvc配置里面还要扫描controller -->

	<context:component-scan base-package="com.km">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!-- 异步任务线程池 -->
	<task:annotation-driven executor="myExecutor"
		scheduler="myScheduler" /> 
	<!-- 线程池 -->
	<task:executor id="myExecutor" pool-size="4" /> 
	<!-- 调度池 -->
	<task:scheduler id="myScheduler" pool-size="50" /> 
	

	<!-- freemarker配置 -->
	<!-- ftl模板路径 <bean id="ftlPath" class="java.lang.String"> <constructor-arg 
		value="/ftl" /> </bean> -->

	<!-- ftl输出路径 <bean id="outPath" class="java.lang.String"> <constructor-arg 
		value="/jsp/template" /> </bean> -->

	<!-- jdbc资源文件、文件路径配置 -->
	<context:property-placeholder
		location="classpath:jdbc.properties,classpath:annFilePath.properties" />

	<!-- 数据源 org.apache.commons.dbcp.BasicDataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!--创建Spring的SessionFactory工厂 -->
	<!-- 和hibernate4整合没有提供专门的针对Annotation的类，直接在LocalSessionFactoryBean中已经集成 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 设置Spring去哪那个包中查找相应的实体类 -->
		<property name="packagesToScan">
			<value>com.km.model</value>
		</property>

		<!-- 配置Hibernate 的常用属性 -->
		<property name="hibernateProperties">
			<!-- <value> hibernate.dialect=org.hibernate.dialect.HSQLDialect </value> -->
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- 开发模式 -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
	</bean>

	<!-- 配置Spring的事务处理 -->
	<!-- 创建事务管理器 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>


	<!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性 -->

	<!-- 事务注解和xml配置二选一 -->
	<!-- 开启事务控制的注解支持 -->
	<tx:annotation-driven transaction-manager="txManager" />


	<!-- Cache配置 <cache:annotation-driven cache-manager="cacheManager" /> <bean 
		id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" 
		p:configLocation="classpath:ehcache.xml" /> <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" 
		p:cacheManager-ref="ehCacheManagerFactory" /> -->

</beans>